{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["RINKEBY","CHAIN_ID","TOKEN_ADDRESS","SWAP_AGENT_IMPL","ETHSwapAgentImpl","BSC_TESTNET","BSCSwapAgentImpl","App","state","loaded","targetChain","swapFee","amount","registered","tokenBalance","erc20SpendingApproved","connectedWallet","buttonText","componentDidMount","a","window","ethereum","on","console","log","web3","setContractAddresses","parseInt","chainId","setState","error","alert","assert","Web3","eth","getAccounts","accounts","swapAgent","Contract","abi","networks","address","token","IERC20","methods","call","registeredERC20","selectedAddress","updateApprovedAmount","listenToSwapEvents","handleConnect","request","method","catch","code","then","result","handleInputChange","event","target","value","type","checked","name","handleSwitch","params","String","toString","chainName","nativeCurrency","symbol","decimals","rpcUrls","blockExplorerUrls","handleSending","amountBN","utils","toBN","amountInWei","toWei","swapETH2BSC","send","from","swapBSC2ETH","allowance","_address","spendingApproved","fromWei","balanceOf","handleSwapEvent","object","handleApprove","approve","events","Approval","owner","SwapStarted","fromAddr","SwapFilled","toAddress","this","Container","Row","Col","md","Button","onClick","style","display","onChange","Number","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4451bb63.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport BSCSwapAgentImpl from \"./contracts/BSCSwapAgentImpl.json\";\nimport ETHSwapAgentImpl from \"./contracts/ETHSwapAgentImpl.json\";\nimport IERC20 from \"./contracts/IERC20.json\";\nimport Web3 from \"web3\";\nimport utils from \"web3-utils\";\nimport assert from \"assert\";\n\nconst RINKEBY = {\n  CHAIN_ID: 4,\n  TOKEN_ADDRESS: \"0x6bd5eedAE4dF424262fb76a785E7Dc231b3EdaA1\",\n  SWAP_AGENT_IMPL: ETHSwapAgentImpl,\n};\n\nconst BSC_TESTNET = {\n  CHAIN_ID: 97,\n  TOKEN_ADDRESS: \"0xFBd4637305BB9aF06184279a4612BD4440a03b2c\",\n  SWAP_AGENT_IMPL: BSCSwapAgentImpl,\n};\n\nclass App extends Component {\n  state = {\n    loaded: false,\n    targetChain: null,\n    swapFee: null,\n    amount: 0,\n    registered: false,\n    tokenBalance: 0,\n    erc20SpendingApproved: 0,\n    connectedWallet: null,\n    buttonText: \"Connect\",\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Is there an equivalent for web3??\n      if (window.ethereum) {\n        window.ethereum.on(\"accountsChanged\", () => {\n          console.log(\"Account changed!\");\n          if (this.web3) {\n            this.setContractAddresses(parseInt(window.ethereum.chainId));\n          }\n        });\n        window.ethereum.on(\"chainChanged\", (chainId) => {\n          console.log(\"New chain! \", chainId);\n          if (this.web3) {\n            this.setContractAddresses(parseInt(chainId));\n          }\n        });\n      }\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ loaded: true });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Make sure you are on the rinkeby network. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  setContractAddresses = async (chainId) => {\n    console.log(\"setcontract\");\n    assert(typeof chainId == \"number\");\n\n    this.web3 = new Web3(window.ethereum);\n    this.accounts = await this.web3.eth.getAccounts();\n\n    let targetChain = null;\n    let registered = null;\n\n    if (chainId == RINKEBY.CHAIN_ID) targetChain = RINKEBY;\n    else if (chainId == BSC_TESTNET.CHAIN_ID) targetChain = BSC_TESTNET;\n    else assert(false);\n\n    this.swapAgent = new this.web3.eth.Contract(\n      targetChain.SWAP_AGENT_IMPL.abi,\n      targetChain.SWAP_AGENT_IMPL.networks[chainId].address\n    );\n\n    this.token = new this.web3.eth.Contract(\n      IERC20.abi,\n      targetChain.TOKEN_ADDRESS\n    );\n\n    const swapFee = await this.swapAgent.methods.swapFee().call();\n\n    if (targetChain == RINKEBY)\n      registered = await this.swapAgent.methods\n        .registeredERC20(targetChain.TOKEN_ADDRESS)\n        .call();\n\n    this.setState({\n      targetChain: targetChain,\n      swapFee: swapFee,\n      registered: registered,\n      buttonText: \"Connected \" + window.ethereum.selectedAddress,\n      connectedWallet: window.ethereum.selectedAddress,\n    });\n\n    this.updateApprovedAmount();\n    this.listenToSwapEvents();\n  };\n\n  handleConnect = async () => {\n    if (this.state.buttonText != \"Connect\") return;\n\n    window.ethereum\n      .request({ method: \"eth_requestAccounts\" })\n      .catch((error) => {\n        if (error.code === 4001) {\n          // EIP-1193 userRejectedRequest error\n          console.log(\"Please connect to MetaMask.\");\n        } else {\n          console.error(error);\n        }\n      })\n      .then((result) => {\n        if (result) {\n          const chainId = parseInt(window.ethereum.chainId);\n\n          if (chainId != RINKEBY.CHAIN_ID && chainId != BSC_TESTNET.CHAIN_ID) {\n            alert(\n              \"We currently only support the Rinkeby testnet and the BSC testnet. Please change your network in metamask\"\n            );\n            // How to handle disconnect?\n            return;\n          }\n\n          this.setContractAddresses(chainId);\n        }\n      });\n  };\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSwitch = async () => {\n    if (!this.web3) {\n      alert(\"Connect a wallet first!\");\n      return;\n    }\n\n    const chainId = parseInt(window.ethereum.chainId);\n\n    if (chainId == RINKEBY.CHAIN_ID) {\n      const params = [\n        {\n          chainId: String(\"0x\" + BSC_TESTNET.CHAIN_ID.toString(16)),\n          chainName: \"Binance Testnet\",\n          nativeCurrency: {\n            name: \"BNB\",\n            symbol: \"BNB\",\n            decimals: 18,\n          },\n          rpcUrls: [\"https://data-seed-prebsc-1-s3.binance.org:8545\"],\n          blockExplorerUrls: [\"https://testnet.bscscan.com/\"],\n        },\n      ];\n\n      window.ethereum.request({\n        method: \"wallet_addEthereumChain\",\n        params: params,\n      });\n    } else {\n      alert(\n        \"Please switch chain manually on Metamask as Metamask does not allow switching to default chains programatically.\"\n      );\n      return;\n    }\n\n    this.setContractAddresses(chainId);\n  };\n\n  handleSending = async () => {\n    if (!this.web3) {\n      alert(\"Connect a wallet first!\");\n      return;\n    }\n\n    const amountBN = utils.toBN(this.state.amount);\n    const amountInWei = utils.toWei(amountBN);\n\n    if (this.state.targetChain == RINKEBY) {\n      await this.swapAgent.methods\n        .swapETH2BSC(\n          this.state.targetChain.TOKEN_ADDRESS,\n          amountInWei.toString()\n        )\n        .send({ from: this.accounts[0], value: this.state.swapFee });\n    } else if (this.state.targetChain == BSC_TESTNET) {\n      await this.swapAgent.methods\n        .swapBSC2ETH(\n          this.state.targetChain.TOKEN_ADDRESS,\n          amountInWei.toString()\n        )\n        .send({ from: this.accounts[0], value: this.state.swapFee });\n    } else {\n      assert(false);\n    }\n  };\n\n  updateApprovedAmount = async () => {\n    const spendingApproved = utils.fromWei(\n      String(\n        await this.token.methods\n          .allowance(this.accounts[0], this.swapAgent._address)\n          .call()\n      )\n    );\n\n    const tokenBalance = utils.fromWei(await this.token.methods.balanceOf(this.accounts[0]).call());\n\n    this.setState({ erc20SpendingApproved: spendingApproved,\n                     tokenBalance: tokenBalance});\n  };\n\n  handleSwapEvent = async (object) => {\n    alert(object[\"event\"]);\n\n    if (object[\"event\"] == \"Approval\") {\n      this.updateApprovedAmount();\n    }\n  };\n\n  handleApprove = async () => {\n    if (!this.web3) {\n      alert(\"Connect a wallet first!\");\n      return;\n    }\n\n    const amountBN = utils.toBN(this.state.amount);\n    const amountInWei = utils.toWei(amountBN);\n\n    await this.token.methods\n      .approve(this.swapAgent._address, amountInWei.toString())\n      .send({ from: this.accounts[0] });\n  };\n\n  listenToSwapEvents = async () => {\n    this.token.events\n      .Approval({ owner: this.accounts[0] })\n      .on(\"data\", this.handleSwapEvent);\n    this.swapAgent.events\n      .SwapStarted({ fromAddr: this.accounts[0] })\n      .on(\"data\", this.handleSwapEvent);\n    this.swapAgent.events\n      .SwapFilled({ toAddress: this.accounts[0] })\n      .on(\"data\", this.handleSwapEvent);\n  };\n\n  render() {\n    if (!this.state.loaded) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <Container>\n        <Row>\n          <Col md={7}>\n            <h1>ERC20 &#11138; BEP20 Swap Service</h1>\n            <p>\n              Use this service to bridge your ERC20 token to and from the\n              Rinkeby Test Network onto the Binance Smart Chain (BSC) Testnet\n            </p>\n          </Col>\n          <Col md={1}>\n            <Button onClick={this.handleConnect}>\n              {this.state.buttonText}\n            </Button>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col md={4}>\n            <h2>\n              Current {this.state.targetChain == RINKEBY ? \"ERC20\" : \"BEP20\"}{\" \"}\n              Token\n            </h2>\n            <p>\n              Symbol: ASD deployed at Address:{\" \"}\n              <b>\n                {this.state.targetChain && this.state.targetChain.TOKEN_ADDRESS}{\" \"}\n              </b>\n            </p>\n          </Col>\n          <Col md={4}>\n            Current Swap Fee: <b>{this.state.swapFee}</b> wei\n          </Col>\n          <p\n            style={this.state.targetChain == RINKEBY ? {} : { display: \"none\" }}\n          >\n            registeredERC20 for token address is{\" \"}\n            <b>{this.state.registered ? \"true\" : \"false\"} </b>\n          </p>\n        </Row>\n\n        <Row>\n          <Col md={5}>\n            <h3>\n              Approve swap contract to spend your{\" \"}\n              {this.state.targetChain == RINKEBY ? \"ERC20\" : \"BEP20\"}{\" \"}\n            </h3>\n            <p>\n              From:{\" \"}\n              <b>\n                {this.state.targetChain == RINKEBY ? \"RINKEBY\" : \"BSC_TESTNET\"}\n              </b>{\" \"}\n              network\n            </p>\n            <p>\n              Token Balance: <b>{this.state.tokenBalance}</b>\n            </p>\n            <p>\n              Current approval status/amount:{\" \"}\n              <b>{this.state.erc20SpendingApproved} ASD</b>{\" \"}\n            </p>\n            <p>I want to send </p>\n            <input\n              type=\"number\"\n              name=\"amount\"\n              onChange={this.handleInputChange}\n              value={this.state.amount}\n            />\n            <Row>\n              <Col\n                style={\n                  Number(this.state.amount) >\n                  Number(this.state.erc20SpendingApproved)\n                    ? {}\n                    : { display: \"none\" }\n                }\n              >\n                <Button onClick={this.handleApprove}>Approve ASD</Button>\n              </Col>\n              <Col>\n                <Button onClick={this.handleSending}>Swap ASD</Button>{\" \"}\n              </Col>\n            </Row>\n          </Col>\n\n          <Col md={1}>\n            <h3> &#10132; </h3>\n            <br />\n            <Button onClick={this.handleSwitch}>Switch</Button>\n          </Col>\n\n          <Col md={5}>\n            <p>\n              To{\" \"}\n              <b>\n                {this.state.targetChain == RINKEBY ? \"BSC_TESTNET\" : \"RINKEBY\"}\n              </b>{\" \"}\n              recipient Address: <b>{this.state.connectedWallet}</b>\n            </p>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}